package com.devsuperiorT.dscommerce.controllers;

import java.net.URI;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.devsuperiorT.dscommerce.dto.OrderDTO;
import com.devsuperiorT.dscommerce.services.OrderService;

// Arquitetura por padrão de camadas
// Aqui é o controlador que chama o serviço
@RestController // Responder pela web
@RequestMapping(value = "/orders") // Rota de mapeamento
public class OrderController {

	@Autowired // Dependencia | Chamando o serviço
	private OrderService service;

	@PreAuthorize("hasRole('ROLE_ADMIN')") // Permissão para ADMIN
	@GetMapping(value = "/{id}") // Retorno da consulta
	public ResponseEntity<OrderDTO> findById(@PathVariable Long id) {
		OrderDTO dto = service.findById(id);
		return ResponseEntity.ok(dto); // Retorno Customizado
	}
	
	@PreAuthorize("hasRole('ROLE_CLIENT')")
	@PostMapping
	public ResponseEntity<OrderDTO> insert(@Valid @RequestBody OrderDTO dto) {
		dto = service.insert(dto);
		// Criar link para orecurso criado
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(dto.getId()).toUri();
		return ResponseEntity.created(uri).body(dto);// Retorno Customizado
	}
}
